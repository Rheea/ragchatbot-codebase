USER QUERY PROCESSING FLOW - DETAILED DATA & FILES
==================================================

┌─────────────┐                    ┌─────────────────────────────────────────────────────┐
│    USER     │                    │                  FRONTEND                           │
│             │                    │                script.js                           │
│ Types query │                    │                                                     │
│ Clicks send │                    │  sendMessage() function:                           │
└─────────────┘                    │  • const query = chatInput.value.trim()           │
       │                           │  • chatInput.disabled = true                      │
       │ Example: "What is MCP?"   │  • addMessage(query, 'user')                     │
       └──────────────────────────▶│  • createLoadingMessage()                        │
                                   └─────────────────┬───────────────────────────────────┘
                                                     │
                                                     │ fetch('/api/query', {
                                                     │   method: 'POST',
                                                     │   headers: {'Content-Type': 'application/json'},
                                                     │   body: JSON.stringify({
                                                     │     query: "What is MCP?",
                                                     │     session_id: currentSessionId
                                                     │   })
                                                     │ })
                                                     ▼
                   ┌─────────────────────────────────────────────────────────────────────┐
                   │                      FASTAPI BACKEND                                │
                   │                        app.py                                       │
                   │                                                                     │
                   │  @app.post("/api/query", response_model=QueryResponse)             │
                   │  async def query_documents(request: QueryRequest):                 │
                   │    • request.query = "What is MCP?"                               │
                   │    • request.session_id = "uuid-123" or None                     │
                   │    • session_id = session_id or create_session()                 │
                   └─────────────────────────┬───────────────────────────────────────────┘
                                             │
                                             │ answer, sources = rag_system.query(
                                             │   query="What is MCP?",
                                             │   session_id="uuid-123"
                                             │ )
                                             ▼
                   ┌─────────────────────────────────────────────────────────────────────┐
                   │                   RAG SYSTEM ORCHESTRATOR                          │
                   │                      rag_system.py                                 │
                   │                                                                     │
                   │  def query(self, query: str, session_id: str):                     │
                   │    1. history = session_manager.get_conversation_history()         │
                   │    2. response = ai_generator.generate_response()                  │
                   │    3. sources = tool_manager.get_last_sources()                   │
                   │    4. session_manager.add_exchange()                               │
                   └─────────────────┬──────────────────────┬────────────────────────────┘
                                     │                      │
                                     │                      │ get_conversation_history(session_id)
                                     │                      │ returns: "User: Hello\nAI: Hi there!"
                                     │                      ▼
                                     │            ┌──────────────────────────────┐
                                     │            │      SESSION MANAGER         │
                                     │            │     session_manager.py        │
                                     │            │                               │
                                     │            │  class SessionManager:        │
                                     │            │    sessions: Dict[str, List]  │
                                     │            │    get_conversation_history() │
                                     │            │    add_exchange()             │
                                     │            │    create_session()           │
                                     │            └──────────────────────────────┘
                                     │
                                     │ generate_response(
                                     │   query="Answer this question about course materials: What is MCP?",
                                     │   conversation_history="User: Hello\nAI: Hi there!",
                                     │   tools=[search_course_content],
                                     │   tool_manager=tool_manager
                                     │ )
                                     ▼
          ┌─────────────────────────────────────────────────────────────────────────────┐
          │                         AI GENERATOR                                        │
          │                       ai_generator.py                                       │
          │                                                                             │
          │  def generate_response(self, query, conversation_history, tools):           │
          │    system_content = SYSTEM_PROMPT + conversation_history                    │
          │    response = self.client.messages.create(                                 │
          │      model="claude-3-5-sonnet-20241022",                                  │
          │      messages=[{"role": "user", "content": query}],                       │
          │      system=system_content,                                                │
          │      tools=tools,                                                          │
          │      tool_choice={"type": "auto"}                                         │
          │    )                                                                       │
          └─────────────────────────┬───────────────────────────────────────────────────┘
                                    │
                                    │ API Call to Claude with:
                                    │ - System prompt with conversation history
                                    │ - User message: "Answer this question about course materials: What is MCP?"
                                    │ - Available tools: [search_course_content]
                                    │ - Auto tool choice
                                    ▼
          ┌─────────────────────────────────────────────────────────────────────────────┐
          │                        ANTHROPIC CLAUDE API                                 │
          │                                                                             │
          │  Claude analyzes the query "What is MCP?" and decides:                     │
          │  "This appears to be about course content, I should search"                │
          │                                                                             │
          │  Returns: {                                                                │
          │    "stop_reason": "tool_use",                                             │
          │    "content": [{                                                          │
          │      "type": "tool_use",                                                  │
          │      "name": "search_course_content",                                     │
          │      "input": {                                                           │
          │        "query": "MCP",                                                    │
          │        "course_name": null                                                │
          │      }                                                                    │
          │    }]                                                                     │
          │  }                                                                         │
          └─────────────────────────┬───────────────────────────────────────────────────┘
                                    │
                                    │ Tool execution requested
                                    │ _handle_tool_execution() called
                                    ▼
          ┌─────────────────────────────────────────────────────────────────────────────┐
          │                         TOOL MANAGER                                        │
          │                       search_tools.py                                       │
          │                                                                             │
          │  def execute_tool(self, tool_name, **kwargs):                              │
          │    tool = self.tools[tool_name]  # CourseSearchTool                        │
          │    return tool.execute(**kwargs)                                           │
          │                                                                             │
          │  CourseSearchTool.execute(query="MCP", course_name=None):                 │
          │    results = self.store.search_content("MCP", None, None)                 │
          │    self.last_sources = format_sources(results)                            │
          │    return formatted_results                                                │
          └─────────────────────────┬───────────────────────────────────────────────────┘
                                    │
                                    │ search_content(
                                    │   query="MCP",
                                    │   course_filter=None,
                                    │   lesson_filter=None
                                    │ )
                                    ▼
          ┌─────────────────────────────────────────────────────────────────────────────┐
          │                        VECTOR STORE                                         │
          │                       vector_store.py                                       │
          │                                                                             │
          │  def search_content(self, query, course_filter, lesson_filter):            │
          │    # Create embedding for "MCP"                                            │
          │    query_embedding = self.embedding_model.encode([query])                  │
          │    # Search ChromaDB with filters                                          │
          │    results = self.collection.query(                                        │
          │      query_embeddings=query_embedding,                                     │
          │      n_results=self.max_results,                                          │
          │      where=build_filters(course_filter, lesson_filter)                    │
          │    )                                                                       │
          │    return SearchResults(results)                                           │
          └─────────────────────────┬───────────────────────────────────────────────────┘
                                    │
                                    │ ChromaDB query returns:
                                    │ {
                                    │   "documents": ["Course Building Towards Computer Use Lesson 3 content: MCP stands for...",
                                    │                 "Course MCP Integration Lesson 1 content: Model Context Protocol..."],
                                    │   "metadatas": [{"course_title": "Building Towards Computer Use", "lesson_number": 3},
                                    │                  {"course_title": "MCP Integration", "lesson_number": 1}],
                                    │   "distances": [0.1, 0.15]
                                    │ }
                                    ▼
          ┌─────────────────────────────────────────────────────────────────────────────┐
          │                         CHROMADB                                           │
          │                    Vector Database                                          │
          │                                                                             │
          │  Collection: course_content                                                │
          │  • Embeddings: 1536-dim vectors from sentence-transformers                │
          │  • Documents: Text chunks with lesson context                             │
          │  • Metadata: {course_title, lesson_number, chunk_index}                  │
          │  • Similarity search using cosine distance                               │
          └─────────────────────────────────────────────────────────────────────────────┘

RESPONSE FLOW BACK UP THE CHAIN
===============================

Search Results ──────────┐
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                      TOOL MANAGER                                           │
    │                    search_tools.py                                          │
    │                                                                             │
    │  • Formats search results into readable text                               │
    │  • Sets self.last_sources = ["Building Towards Computer Use - Lesson 3",   │
    │                               "MCP Integration - Lesson 1"]                 │
    │  • Returns: "Found 2 relevant results about MCP:\n1. MCP stands for..."   │
    └─────────────────────────┬───────────────────────────────────────────────────┘
                              │
                              │ Tool result returned to Claude
                              ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                     AI GENERATOR                                            │
    │                   ai_generator.py                                           │
    │                                                                             │
    │  _handle_tool_execution():                                                  │
    │    • Add tool results to conversation                                       │
    │    • Make follow-up Claude API call                                        │
    │    • messages = [                                                          │
    │        {"role": "user", "content": "What is MCP?"},                       │
    │        {"role": "assistant", "content": [tool_use_block]},                │
    │        {"role": "user", "content": [tool_results]}                        │
    │      ]                                                                     │
    └─────────────────────────┬───────────────────────────────────────────────────┘
                              │
                              │ Second Claude API call with search results
                              ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                   CLAUDE FINAL RESPONSE                                     │
    │                                                                             │
    │  Claude synthesizes the search results and returns:                        │
    │  "MCP stands for Model Context Protocol. It's a standard that allows..."   │
    │                                                                             │
    │  Response: {                                                               │
    │    "content": [{"type": "text", "text": "MCP stands for..."}],            │
    │    "stop_reason": "end_turn"                                              │
    │  }                                                                         │
    └─────────────────────────┬───────────────────────────────────────────────────┘
                              │
                              │ Final response text
                              ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                    RAG SYSTEM                                               │
    │                  rag_system.py                                              │
    │                                                                             │
    │  • response = "MCP stands for Model Context Protocol..."                   │
    │  • sources = tool_manager.get_last_sources()                              │
    │  • sources = ["Building Towards Computer Use - Lesson 3",                 │
    │                "MCP Integration - Lesson 1"]                               │
    │  • session_manager.add_exchange(session_id, query, response)              │
    │  • return (response, sources)                                              │
    └─────────────────────────┬───────────────────────────────────────────────────┘
                              │
                              │ return QueryResponse(
                              │   answer="MCP stands for Model Context Protocol...",
                              │   sources=["Building Towards Computer Use - Lesson 3", ...],
                              │   session_id="uuid-123"
                              │ )
                              ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                     FASTAPI                                                │
    │                     app.py                                                 │
    │                                                                             │
    │  JSON Response:                                                            │
    │  {                                                                         │
    │    "answer": "MCP stands for Model Context Protocol. It's a standard...", │
    │    "sources": ["Building Towards Computer Use - Lesson 3",                │
    │                "MCP Integration - Lesson 1"],                              │
    │    "session_id": "uuid-123"                                               │
    │  }                                                                         │
    └─────────────────────────┬───────────────────────────────────────────────────┘
                              │
                              │ HTTP 200 OK
                              │ Content-Type: application/json
                              ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                    FRONTEND                                                │
    │                   script.js                                                │
    │                                                                             │
    │  const data = await response.json();                                       │
    │  • loadingMessage.remove()                                                │
    │  • addMessage(data.answer, 'assistant', data.sources)                     │
    │  • currentSessionId = data.session_id                                     │
    │  • chatInput.disabled = false                                             │
    │  • Display: "MCP stands for Model Context Protocol..."                    │
    │  • Sources collapsible: "Building Towards Computer Use - Lesson 3"        │
    └─────────────────────────────────────────────────────────────────────────────┘

KEY DATA STRUCTURES
===================

QueryRequest (Pydantic Model):
  • query: str
  • session_id: Optional[str]

QueryResponse (Pydantic Model):
  • answer: str
  • sources: List[str]
  • session_id: str

SearchResults (Custom Class):
  • documents: List[str]
  • metadatas: List[Dict]
  • distances: List[float]

CourseChunk (Data Model):
  • content: str
  • course_title: str
  • lesson_number: int
  • chunk_index: int